import * as fs from 'fs';
import {join} from 'path';
import * as LHR9 from '../data/lhr-9.json';
import * as LHR9_EX_2 from '../data/lhr-9-ex-2.json';
import * as LHR9REDUCED from '../data/lhr-9_reduced.json';
import * as LHR9REDUCEDCOMPARE from '../data/lhr-9_reduced-baseline.json';
import * as LHR8 from '../data/lhr-8.json';
import {
  createReducedReport,
  enrichReducedReport
} from '../../src/lib/commands/collect/processes/generate-reports';
import { userFlowReportToMdTable } from '../../src/lib/commands/assert/processes/md-table';
import FlowResult from "lighthouse/types/lhr/flow";
import {ReducedReport} from "../../src/lib/commands/collect/utils/user-flow/types";

const lhr8 = LHR8 as any;
const lhr9 = LHR9 as unknown as FlowResult;
const lhr9Ex2 = LHR9_EX_2 as unknown as FlowResult;
const lhr9reduced = LHR9REDUCED as unknown as ReducedReport;
const lhr9ReducedBaseline = LHR9REDUCEDCOMPARE as unknown as ReducedReport;

function extractMdTableFromFile(path: string) {
  const mdString = fs.readFileSync(join(__dirname, path), 'utf-8');
  // Removes additional chars generated by the file system.
  const mdTable = mdString.trim();
  return mdTable[1] === ' ' ?  '| ' + mdTable.slice(2) : mdTable;
}

describe('md-table', () => {

  it('should throw if version is lower than 9', () => {
    expect(LHR8['steps']).toBe(undefined);
    expect(parseFloat(lhr8.lhr.lighthouseVersion)).toBeLessThan(9);
  });

  it('should NOT throw if version is greater or equal than 9', () => {
    expect(parseFloat(lhr9.steps[0].lhr.lighthouseVersion)).toBeGreaterThan(9);
  });

  it('should generate reduced JSON format for v9 raw JSON result if createReducedReport is called', () => {
    const reducedLhr9 = createReducedReport(lhr9);
    expect(reducedLhr9).toEqual(lhr9reduced);
  });

  it('should generate reduced JSON with baseline results if enrichReducedReport is called', () => {
    const reducedLhr9 = createReducedReport(lhr9);
    const enrichedReducedLhr9 = enrichReducedReport(reducedLhr9, lhr9Ex2)
    expect(enrichedReducedLhr9).toEqual(lhr9ReducedBaseline);
  });

  it('should print MD table if userFlowReportToMdTable is called with a reduced result', () => {
    const mdTable = userFlowReportToMdTable(lhr9);
    const LHRREDUCEDMD = extractMdTableFromFile('../data/lhr-9_reduced.md');
    expect(mdTable).toEqual(LHRREDUCEDMD);
  });

  it('should return a Md table comparing to reports if userFlowReportToMdTable is passed a baseline report', () => {
    const mdTable = userFlowReportToMdTable(lhr9, lhr9Ex2);
    const LHRREDUCEDMD = extractMdTableFromFile('../data/lhr-9_compare.md');
    expect(mdTable).toEqual(LHRREDUCEDMD);
  });
});
