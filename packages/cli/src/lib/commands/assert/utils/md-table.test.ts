import * as fs from 'fs';
import { join } from 'path';
import {
  createReducedReport,
  enrichReducedReportWithBaseline
} from '../../collect/processes/generate-reports';
import { userFlowReportToMdTable } from './md-table';
import FlowResult from 'lighthouse/types/lhr/flow';
import { ReducedReport } from '../../collect/utils/user-flow/types';
import { getReportContent } from 'test-data';

const lhr8 = getReportContent<FlowResult>('lhr-8.json');
const lhr9 = getReportContent<FlowResult>('lhr-9.json');
const lhr9Ex2 = getReportContent<FlowResult>('lhr-e-ex-2.json');
const lhr9reduced = getReportContent<ReducedReport>('lhr-9_reduced.json');
const lhr9ReducedBaseline = getReportContent<ReducedReport>('lhr-9_reduced-baseline.json');

function extractMdTableFromFile(path: string) {
  const mdString = fs.readFileSync(join(__dirname, path), 'utf-8');
  // Removes additional chars generated by the file system.
  const mdTable = mdString.trim();
  return mdTable[1] === ' ' ? '| ' + mdTable.slice(2) : mdTable;
}

describe('md-table', () => {

  it('should throw if version is lower than 9', () => {
    expect(LHR8['steps']).toBe(undefined);
    expect(parseFloat(lhr8.lhr.lighthouseVersion)).toBeLessThan(9);
  });

  it('should NOT throw if version is greater or equal than 9', () => {
    expect(parseFloat(lhr9.steps[0].lhr.lighthouseVersion)).toBeGreaterThan(9);
  });

  it('should generate reduced JSON format for v9 raw JSON result if createReducedReport is called', () => {
    const reducedLhr9 = createReducedReport(lhr9);
    expect(reducedLhr9).toEqual(lhr9reduced);
  });

  it('should generate reduced JSON with baseline results if enrichReducedReportWithBaseline is called', () => {
    const reducedLhr9 = createReducedReport(lhr9);
    const enrichedReducedLhr9 = enrichReducedReportWithBaseline(reducedLhr9, lhr9Ex2);
    expect(enrichedReducedLhr9).toEqual(lhr9ReducedBaseline);
  });

  it('should print MD table if userFlowReportToMdTable is called with a reduced result', () => {
    const mdTable = userFlowReportToMdTable(lhr9);
    const LHRREDUCEDMD = extractMdTableFromFile('../../../../../test-data/raw-reports/lhr-9_reduced.md');
    expect(mdTable).toEqual(LHRREDUCEDMD);
  });

  it('should return a Md table comparing to reports if userFlowReportToMdTable is passed a baseline report', () => {
    const mdTable = userFlowReportToMdTable(lhr9, lhr9Ex2);
    const LHRREDUCEDMD = extractMdTableFromFile('../../../../../test-data/raw-reports/lhr-9_compare.md');
    expect(mdTable).toEqual(LHRREDUCEDMD);
  });
});
